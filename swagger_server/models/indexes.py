# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.index_schema_description import IndexSchemaDescription  # noqa: F401,E501
from swagger_server import util


class Indexes(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, info: str=None, maintainer: str=None, contact_email: str=None, indexes: List[IndexSchemaDescription]=None):  # noqa: E501
        """Indexes - a model defined in Swagger

        :param id: The id of this Indexes.  # noqa: E501
        :type id: str
        :param name: The name of this Indexes.  # noqa: E501
        :type name: str
        :param info: The info of this Indexes.  # noqa: E501
        :type info: str
        :param maintainer: The maintainer of this Indexes.  # noqa: E501
        :type maintainer: str
        :param contact_email: The contact_email of this Indexes.  # noqa: E501
        :type contact_email: str
        :param indexes: The indexes of this Indexes.  # noqa: E501
        :type indexes: List[IndexSchemaDescription]
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'info': str,
            'maintainer': str,
            'contact_email': str,
            'indexes': List[IndexSchemaDescription]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'info': 'info',
            'maintainer': 'maintainer',
            'contact_email': 'contact_email',
            'indexes': 'indexes'
        }
        self._id = id
        self._name = name
        self._info = info
        self._maintainer = maintainer
        self._contact_email = contact_email
        self._indexes = indexes

    @classmethod
    def from_dict(cls, dikt) -> 'Indexes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The indexes of this Indexes.  # noqa: E501
        :rtype: Indexes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Indexes.

        Unique id that identifies this particular endpoint. Multiple endpoints may be configured to create a search cluster to address distinct indexes  # noqa: E501

        :return: The id of this Indexes.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Indexes.

        Unique id that identifies this particular endpoint. Multiple endpoints may be configured to create a search cluster to address distinct indexes  # noqa: E501

        :param id: The id of this Indexes.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Indexes.

        Human readable, meaningful name for the search endpoint  # noqa: E501

        :return: The name of this Indexes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Indexes.

        Human readable, meaningful name for the search endpoint  # noqa: E501

        :param name: The name of this Indexes.
        :type name: str
        """

        self._name = name

    @property
    def info(self) -> str:
        """Gets the info of this Indexes.

        Documentation about the function of the endpoint  # noqa: E501

        :return: The info of this Indexes.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info: str):
        """Sets the info of this Indexes.

        Documentation about the function of the endpoint  # noqa: E501

        :param info: The info of this Indexes.
        :type info: str
        """

        self._info = info

    @property
    def maintainer(self) -> str:
        """Gets the maintainer of this Indexes.

        Maintainer of the api  # noqa: E501

        :return: The maintainer of this Indexes.
        :rtype: str
        """
        return self._maintainer

    @maintainer.setter
    def maintainer(self, maintainer: str):
        """Sets the maintainer of this Indexes.

        Maintainer of the api  # noqa: E501

        :param maintainer: The maintainer of this Indexes.
        :type maintainer: str
        """

        self._maintainer = maintainer

    @property
    def contact_email(self) -> str:
        """Gets the contact_email of this Indexes.

        email address of a support contact  # noqa: E501

        :return: The contact_email of this Indexes.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email: str):
        """Sets the contact_email of this Indexes.

        email address of a support contact  # noqa: E501

        :param contact_email: The contact_email of this Indexes.
        :type contact_email: str
        """

        self._contact_email = contact_email

    @property
    def indexes(self) -> List[IndexSchemaDescription]:
        """Gets the indexes of this Indexes.

        individually addressable indexes supported by this endpoint  # noqa: E501

        :return: The indexes of this Indexes.
        :rtype: List[IndexSchemaDescription]
        """
        return self._indexes

    @indexes.setter
    def indexes(self, indexes: List[IndexSchemaDescription]):
        """Sets the indexes of this Indexes.

        individually addressable indexes supported by this endpoint  # noqa: E501

        :param indexes: The indexes of this Indexes.
        :type indexes: List[IndexSchemaDescription]
        """

        self._indexes = indexes
