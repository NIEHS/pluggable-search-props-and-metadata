# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.index_search_attributes import IndexSearchAttributes  # noqa: F401,E501
from swagger_server import util


class SearchAttributes(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, info: str=None, attributes: List[IndexSearchAttributes]=None):  # noqa: E501
        """SearchAttributes - a model defined in Swagger

        :param id: The id of this SearchAttributes.  # noqa: E501
        :type id: str
        :param name: The name of this SearchAttributes.  # noqa: E501
        :type name: str
        :param info: The info of this SearchAttributes.  # noqa: E501
        :type info: str
        :param attributes: The attributes of this SearchAttributes.  # noqa: E501
        :type attributes: List[IndexSearchAttributes]
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'info': str,
            'attributes': List[IndexSearchAttributes]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'info': 'info',
            'attributes': 'attributes'
        }
        self._id = id
        self._name = name
        self._info = info
        self._attributes = attributes

    @classmethod
    def from_dict(cls, dikt) -> 'SearchAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The searchAttributes of this SearchAttributes.  # noqa: E501
        :rtype: SearchAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this SearchAttributes.

        Unique identifier for this index type  # noqa: E501

        :return: The id of this SearchAttributes.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this SearchAttributes.

        Unique identifier for this index type  # noqa: E501

        :param id: The id of this SearchAttributes.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this SearchAttributes.

        Display name for this index type  # noqa: E501

        :return: The name of this SearchAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this SearchAttributes.

        Display name for this index type  # noqa: E501

        :param name: The name of this SearchAttributes.
        :type name: str
        """

        self._name = name

    @property
    def info(self) -> str:
        """Gets the info of this SearchAttributes.

        Documentation about this particular index type  # noqa: E501

        :return: The info of this SearchAttributes.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info: str):
        """Sets the info of this SearchAttributes.

        Documentation about this particular index type  # noqa: E501

        :param info: The info of this SearchAttributes.
        :type info: str
        """

        self._info = info

    @property
    def attributes(self) -> List[IndexSearchAttributes]:
        """Gets the attributes of this SearchAttributes.

        array of possible search attributes that can be used to support textual advanced search flags as well as query builder interfaces attribute-by-attribute  # noqa: E501

        :return: The attributes of this SearchAttributes.
        :rtype: List[IndexSearchAttributes]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes: List[IndexSearchAttributes]):
        """Sets the attributes of this SearchAttributes.

        array of possible search attributes that can be used to support textual advanced search flags as well as query builder interfaces attribute-by-attribute  # noqa: E501

        :param attributes: The attributes of this SearchAttributes.
        :type attributes: List[IndexSearchAttributes]
        """

        self._attributes = attributes
