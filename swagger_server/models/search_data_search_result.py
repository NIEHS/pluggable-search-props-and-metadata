# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.search_data_linkset import SearchDataLinkset  # noqa: F401,E501
from swagger_server import util


class SearchDataSearchResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, title: str=None, url_link: str=None, subtitle: str=None, content_text: str=None, links: SearchDataLinkset=None):  # noqa: E501
        """SearchDataSearchResult - a model defined in Swagger

        :param title: The title of this SearchDataSearchResult.  # noqa: E501
        :type title: str
        :param url_link: The url_link of this SearchDataSearchResult.  # noqa: E501
        :type url_link: str
        :param subtitle: The subtitle of this SearchDataSearchResult.  # noqa: E501
        :type subtitle: str
        :param content_text: The content_text of this SearchDataSearchResult.  # noqa: E501
        :type content_text: str
        :param links: The links of this SearchDataSearchResult.  # noqa: E501
        :type links: SearchDataLinkset
        """
        self.swagger_types = {
            'title': str,
            'url_link': str,
            'subtitle': str,
            'content_text': str,
            'links': SearchDataLinkset
        }

        self.attribute_map = {
            'title': 'title',
            'url_link': 'url_link',
            'subtitle': 'subtitle',
            'content_text': 'content_text',
            'links': 'links'
        }
        self._title = title
        self._url_link = url_link
        self._subtitle = subtitle
        self._content_text = content_text
        self._links = links

    @classmethod
    def from_dict(cls, dikt) -> 'SearchDataSearchResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The search_data_search_result of this SearchDataSearchResult.  # noqa: E501
        :rtype: SearchDataSearchResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self) -> str:
        """Gets the title of this SearchDataSearchResult.

        Descriptive title for search result  # noqa: E501

        :return: The title of this SearchDataSearchResult.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this SearchDataSearchResult.

        Descriptive title for search result  # noqa: E501

        :param title: The title of this SearchDataSearchResult.
        :type title: str
        """

        self._title = title

    @property
    def url_link(self) -> str:
        """Gets the url_link of this SearchDataSearchResult.

        Resolvable https link to result data location  # noqa: E501

        :return: The url_link of this SearchDataSearchResult.
        :rtype: str
        """
        return self._url_link

    @url_link.setter
    def url_link(self, url_link: str):
        """Sets the url_link of this SearchDataSearchResult.

        Resolvable https link to result data location  # noqa: E501

        :param url_link: The url_link of this SearchDataSearchResult.
        :type url_link: str
        """

        self._url_link = url_link

    @property
    def subtitle(self) -> str:
        """Gets the subtitle of this SearchDataSearchResult.

        Optional subtitle that can be presented as a highlight, publication info, etc  # noqa: E501

        :return: The subtitle of this SearchDataSearchResult.
        :rtype: str
        """
        return self._subtitle

    @subtitle.setter
    def subtitle(self, subtitle: str):
        """Sets the subtitle of this SearchDataSearchResult.

        Optional subtitle that can be presented as a highlight, publication info, etc  # noqa: E501

        :param subtitle: The subtitle of this SearchDataSearchResult.
        :type subtitle: str
        """

        self._subtitle = subtitle

    @property
    def content_text(self) -> str:
        """Gets the content_text of this SearchDataSearchResult.

        Bag of attribute-value paired metadata attached to search hit  # noqa: E501

        :return: The content_text of this SearchDataSearchResult.
        :rtype: str
        """
        return self._content_text

    @content_text.setter
    def content_text(self, content_text: str):
        """Sets the content_text of this SearchDataSearchResult.

        Bag of attribute-value paired metadata attached to search hit  # noqa: E501

        :param content_text: The content_text of this SearchDataSearchResult.
        :type content_text: str
        """

        self._content_text = content_text

    @property
    def links(self) -> SearchDataLinkset:
        """Gets the links of this SearchDataSearchResult.


        :return: The links of this SearchDataSearchResult.
        :rtype: SearchDataLinkset
        """
        return self._links

    @links.setter
    def links(self, links: SearchDataLinkset):
        """Sets the links of this SearchDataSearchResult.


        :param links: The links of this SearchDataSearchResult.
        :type links: SearchDataLinkset
        """

        self._links = links
